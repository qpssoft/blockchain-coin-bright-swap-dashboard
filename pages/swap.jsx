import Card from "../components/Card";
import Head from "next/head";
import { MdSwapVert } from "react-icons/md";
import Button from "../util/Button";
import { getSession, signOut } from "next-auth/react";
import Moralis from "moralis";
import { useEffect, useState } from "react";
import axios from "axios";
import { useSendTransaction } from "wagmi";
import { TransactionContext } from "../context/TransactionContext";
import { useContext } from "react";
import TokenModal from "../components/TokenModal";
import Web3 from 'web3'
import erc20ABI from '../util/abi.json'

const qs = require("qs");
const BigNumber = require('big-number')

const Swap = () => {
  const { connectWallet, currentAccount } = useContext(TransactionContext);

  const [value, setValue] = useState();
  const [valueExchanged, setValueExchanged] = useState("");
  const [options, setOptions] = useState({
    "from" : [],
    "to" : []
  });
  const [option2, setOption2] = useState();
  const [estimatedGasValue, setEstimatedGasValue] = useState();

  function changeToToken(e) {
    setToToken(e.target.value);
    setValueExchanged("");
  }

  function changeValue(e) {
    setValue(e.target.value * 1e18);
    setValueExchanged("");
  }

  const getPrice = async () => {
    if (!option1 || !option2 || !value) return;
    let amount = Number(value * 10 ** option1.decimals);
    const params = {
      sellToken: option1.address,
      buyToken: option2.address,
      sellAmount: amount,
    };
    const response = await fetch(
      `https://api.0x.org/swap/v1/price?${qs.stringfy(params)}`
    );

    const swapPriceJSON = await response.json();

    setValueExchanged(swapPriceJSON.buyAmount / 10 ** option2.decimals);
    setEstimatedGasValue(swapPriceJSON.estimatedGas);
  };

  const getQuote = async (account) => {
    if (!option1 || !option2 || !value) return;
    let amount = Number(value * 10 ** option1.decimals);
    const params = {
      sellToken: option1.address,
      buyToken: option2.address,
      sellAmount: amount,
      takerAddress: account,
    };
    const response = await fetch(
      `https://api.0x.org/swap/v1/quote?${qs.stringfy(params)}`
    );

    const swapQuoteJSON = await response.json();

    setValueExchanged(swapQuoteJSON.buyAmount / 10 ** option2.decimals);
    setEstimatedGasValue(swapQuoteJSON.estimatedGas);

    return swapQuoteJSON;
  };

  const trySwap = async () => {
    let takerAddress = currentAccount;
    const swapQuoteJSON = await getQuote(takerAddress);

    const web3 = new Web3(Web3.givenProvider);
    const fromTokenAddress = option1.address

    const ERC20TokenContract = new web3.eth.Contract(erc20ABI, fromTokenAddress)
    const maxApproval = new BigNumber(2).pow(256).minus(1);
    ERC20TokenContract.methods.approve(
      swapQuoteJSON.allowanceTarget,
      maxApproval,
    )
    .send({from: takerAddress})
    .then( tx => {
      console.log("tx: ", tx)
    })

    const receipt = web3.eth.sendTransaction(swapQuoteJSON)
    console.log(receipt)

  };

  console.log(options)

  return (
    <div className="flex flex-1 items-center justify-center flex-col text-white">
      <Head>
        <title>Exaverse - Coin Swap</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="./icon.ico" />
      </Head>
      <div>
        <div className="bg-dark-secondary border border-primary-color border-2 px-4 py-4 rounded mb-10 text-2xl font-semibold tracking-wide text-center text-primary-color">
          <p>Swap Your Crypto Here</p>
        </div>
        <Card>
          <div className="flex flex-col items-center gap-y-4">
            <div className="bg-dark-primary rounded px-4 py-2 flex">
              <input
                className="bg-dark-primary text-xl py-3 px-4 focus:outline-none"
                type="number"
                placeholder="0.0"
                min="0"
                step="0.01"
                onChange={(e) => changeValue(e)}
              />
              <TokenModal
                onSelectToken={(token) =>
                  setOptions((prevState) => ({
                    ...prevState,
                    from: token,
                  }))
                }
                side="from"
                selectedToken={options}
              />
            </div>
            <div className="p-2 text-xl bg-primary-color rounded">
              <MdSwapVert />
            </div>
            <div className="bg-dark-primary rounded px-4 py-2 flex">
              <input
                className="bg-dark-primary text-xl py-3 px-4 focus:outline-none"
                type="number"
                placeholder="0.0"
                min="0"
                step="0.01"
                value={!valueExchanged ? "" : valueExchanged}
                disabled={true}
              />
              <TokenModal
                onSelectToken={(token) =>
                  setOptions((prevState) => ({
                    ...prevState,
                    "to": token,
                  }))
                }
                side="to"
              />
            </div>
            <div className="w-full flex flex-col items-stretch">
              <Button onClick={trySwap} disabled={!!currentAccount}>
                <p className="w-full">Swap</p>
              </Button>
            </div>
          </div>
        </Card>
      </div>
    </div>
  );
};

export default Swap;
